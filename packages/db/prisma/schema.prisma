generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Views {
  slug  String @id @db.VarChar(128)
  count BigInt @default(1)
}

model Pin {
  id                 String    @id @default(cuid())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  // State â€“ i.e. "Texas", "Michigan", "Florida"
  administrativeArea String?   @db.VarChar(128)
  city               String?   @db.VarChar(128)
  country            String?   @db.VarChar(128)
  // Latitude and longitude
  latitude           Float?
  longitude          Float?
  description        String?   @db.VarChar(2048)
  status             Status    @default(APPROVED)
  // View Count
  views              Int       @default(0)
  // Relation to the pin category
  categoryId         String?
  category           Category? @relation(fields: [categoryId], references: [id])
  // Relation to the pin user
  userId             String?
  user               User?     @relation(fields: [userId], references: [id])
  // Relation to the pin image
  imageId            String?   @unique
  image              Image?    @relation(fields: [imageId], references: [id])
  comments           Comment[]

  @@index([userId])
  @@index([categoryId])
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  body      String   @db.VarChar(2048)
  pinId     String
  pin       Pin      @relation(fields: [pinId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@index([pinId])
  @@index([userId])
}

model Category {
  id        String  @id @default(cuid())
  name      String  @unique @db.VarChar(128)
  slug      String  @unique @db.VarChar(128)
  pins      Pin[]
  channelId String
  channel   Channel @relation(fields: [channelId], references: [id])

  @@index([channelId])
}

model Channel {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String     @unique @db.VarChar(128)
  slug        String     @unique @db.VarChar(128)
  description String     @db.VarChar(2048)
  icon        String?    @db.VarChar(128)
  status      Status     @default(APPROVED)
  categories  Category[]
}

model Image {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  height      Int
  width       Int
  type        String?  @db.VarChar(128)
  // public_id value from Cloudinary
  publicId    String?  @unique @db.VarChar(512)
  // secure_url value from Cloudinary
  src         String   @unique @db.VarChar(512)
  // original source of the image
  url         String?  @unique @db.VarChar(512)
  alt         String   @db.VarChar(512)
  blurDataURL String   @db.VarChar(512)
  pin         Pin?

  @@index([src])
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          Role?     @default(USER)
  pins          Pin[]
  comments      Comment[]

  @@index([email])
}

enum Status {
  APPROVED
  PENDING
  HIDDEN
  DELETED
}

enum Role {
  BLOCKED
  USER
  ADMIN
}
