generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Views {
  slug  String @id @db.VarChar(128)
  count BigInt @default(1)
}

model Pin {
  id                 String     @id @default(cuid())
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  // State â€“ i.e. "Texas", "Michigan", "Florida"
  administrativeArea String?    @db.VarChar(128)
  city               String?    @db.VarChar(128)
  country            String?    @db.VarChar(128)
  // Latitude and longitude
  latitude           Float?
  longitude          Float?
  description        String?    @db.VarChar(2048)
  status             PinStatus  @default(APPROVED)
  // View Count
  views              Int        @default(0)
  communityId        String?
  community          Community? @relation(fields: [communityId], references: [id])
  userId             String?
  user               User?      @relation(fields: [userId], references: [id])
  imageId            String?    @unique
  image              Image?     @relation(fields: [imageId], references: [id])
  comments           Comment[]
  likedBy            User[]     @relation("LikedBy")

  @@index([userId])
  @@index([communityId])
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  body      String   @db.VarChar(2048)
  pinId     String
  pin       Pin      @relation(fields: [pinId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@index([pinId])
  @@index([userId])
}

model Community {
  id          String    @id @default(cuid())
  name        String    @unique @db.VarChar(128)
  slug        String    @unique @db.VarChar(128)
  description String    @db.VarChar(2048)
  icon        String?   @db.VarChar(128)
  status      PinStatus @default(APPROVED)
  pins        Pin[]
}

model Image {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  height      Int
  width       Int
  type        String?  @db.VarChar(128)
  // public_id value from Cloudinary
  publicId    String?  @unique @db.VarChar(512)
  // secure_url value from Cloudinary
  src         String   @unique @db.VarChar(512)
  // original source of the image
  url         String?  @unique @db.VarChar(512)
  alt         String   @db.VarChar(512)
  blurDataURL String   @db.VarChar(512)
  pin         Pin?
  User        User?

  @@index([src])
}

model User {
  id            String     @id @default(cuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  firstName     String?
  lastName      String?
  displayName   String?    @unique
  email         String?    @unique
  emailVerified Boolean?   @default(false)
  imageId       String?    @unique
  image         Image?     @relation(fields: [imageId], references: [id])
  role          Role       @default(USER)
  status        UserStatus @default(Active)
  pins          Pin[]
  comments      Comment[]
  likedPins     Pin[]      @relation("LikedBy")

  @@index([email])
}

enum UserStatus {
  Active
  Disabled
  Anonymized
  PendingAnonymize
}

enum PinStatus {
  APPROVED
  PENDING
  HIDDEN
  DELETED
}

enum Role {
  BLOCKED
  USER
  ADMIN
}
