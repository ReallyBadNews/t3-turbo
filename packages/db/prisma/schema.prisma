generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Views {
  slug  String @id @db.VarChar(128)
  count BigInt @default(1)
}

model Stash {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User?    @relation(fields: [authorEmail], references: [id])
  authorEmail String?
  url         String   @unique @db.VarChar(512)
  host        String?
  title       String   @db.VarChar(280)
  slug        String   @unique @db.VarChar(280)
  image       Image?
  description String   @db.VarChar(2048)
  body        String?  @db.Text
  mdxBody     String?  @db.Text
  tags        Tag[]

  @@index([host, slug])
  @@index([authorEmail])
}

model Pin {
  id                 String    @id @default(cuid())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  // State â€“ i.e. "Texas", "Michigan", "Florida"
  administrativeArea String?   @db.VarChar(128)
  city               String?   @db.VarChar(128)
  country            String?   @db.VarChar(128)
  // Latitude and longitude
  latitude           Float?
  longitude          Float?
  description        String?   @db.VarChar(2048)
  status             Status    @default(APPROVED)
  // Relation to the pin category
  categoryId         String?
  category           Category? @relation(fields: [categoryId], references: [id])
  // Relation to the pin user
  userId             String?
  user               User?     @relation(fields: [userId], references: [id])
  // Relation to the pin image
  imageId            String?   @unique
  image              Image?    @relation(fields: [imageId], references: [id])

  @@index([userId])
  @@index([categoryId])
}

model Category {
  id        String  @id @default(cuid())
  name      String  @unique @db.VarChar(128)
  slug      String  @unique @db.VarChar(128)
  pins      Pin[]
  channelId String
  channel   Channel @relation(fields: [channelId], references: [id])

  @@index([channelId])
}

model Channel {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String     @unique @db.VarChar(128)
  slug        String     @unique @db.VarChar(128)
  description String     @db.VarChar(2048)
  icon        String?    @db.VarChar(128)
  status      Status     @default(APPROVED)
  categories  Category[]
}

model Image {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  height      Int
  width       Int
  type        String?  @db.VarChar(128)
  // public_id value from Cloudinary
  publicId    String?  @unique @db.VarChar(512)
  // secure_url value from Cloudinary
  src         String   @unique @db.VarChar(512)
  // original source of the image
  url         String?  @unique @db.VarChar(512)
  alt         String   @db.VarChar(512)
  blurDataURL String   @db.VarChar(512)
  stash       Stash?   @relation(fields: [id], references: [id])
  pin         Pin?

  @@index([src])
  @@index([id])
}

model Tag {
  id      String  @id @default(cuid())
  name    String  @unique
  slug    String  @unique
  stashes Stash[]
}

model Account {
  id                       String   @id @default(cuid())
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.VarChar(500)
  access_token             String?  @db.VarChar(500)
  refresh_token_expires_in Int?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String?
  role         Role     @default(USER)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          Role?     @default(USER)
  accounts      Account[]
  sessions      Session[]
  Stash         Stash[]
  Pin           Pin[]

  @@index([email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Status {
  APPROVED
  PENDING
  HIDDEN
  DELETED
}

enum Role {
  USER
  ADMIN
}
